{"version":3,"sources":["components/mentor/Mentor.js","components/student/Student.js","App.js","serviceWorker.js","index.js"],"names":["mentors","require","mentor","props","react_default","a","createElement","name","react_select_esm","className","onChange","changed","options","student","data","App","state","nick","localStorage","getItem","changeNameHandler","event","_this","setState","label","setItem","_findGroup$map","filter","el","map","group","Object","slicedToArray","names","keys","join","key","Student","taskName","Set","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","students","value","item","elem","task","add","err","return","taskStyle","textAlign","mentor_Mentor","this","Array","from","background","newGroup","toConsumableArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","st","std","objectSpread","ts","console","log","tasks","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","tsN","hasOwnProperty","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAIMA,SAAUC,EAAQ,IAeTC,EAbA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMI,MAClBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,UAAU,SACVC,SAAUP,EAAMQ,QAChBC,QAASZ,MCPFa,EAJC,SAAAV,GACd,OAAOC,EAAAC,EAAAC,cAAA,YAAOH,EAAMI,OCEhBO,EAAOb,EAAQ,GAiINc,6MA9HbC,MAAQ,CACNC,KAAMC,aAAaC,QAAQ,WAG7BC,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZN,KAAMI,EAAMG,QAEdN,aAAaO,QAAQ,OAAQJ,EAAMG,gFAInC,IADOE,EACSZ,EAAKa,OACnB,SAAAC,GAAE,OAAIA,EAAGJ,QAAUN,aAAaC,QAAQ,UAGlBU,IAAI,SAAAD,GAAE,OAAIA,EAAGE,QAAhCA,EALEC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,MAMHO,EAAQH,EAAMD,IAAI,SAAAC,GACpB,IAAIvB,EAAOwB,OAAOG,KAAKJ,GAAOK,OAC9B,OACE/B,EAAAC,EAAAC,cAAA,MAAI8B,IAAK7B,GACPH,EAAAC,EAAAC,cAAC+B,EAAD,CAAS9B,KAAMA,OAKjB+B,EAAW,IAAIC,IAfZC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAgBP,QAAAC,EAAAC,EAAqBf,EAArBgB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4B,KAAnBU,EAAmBN,EAAAO,MAC1B,IAAK,IAAIC,KAAQF,EAAU,CACbA,EAASE,GACfvB,IAAI,SAAAwB,GACR,IAAIC,EAAOvB,OAAOG,KAAKmB,GAAM,GAC7B,OAAOf,EAASiB,IAAID,OArBnB,MAAAE,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GA0BP,IAAMgB,EAAY,CAChBC,UAAW,QAGb,OACEvD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACsD,EAAD,CAAQrD,KAAMsD,KAAK7C,MAAMC,KAAMN,QAASkD,KAAKzC,oBAC7ChB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACC2B,IAGL7B,EAAAC,EAAAC,cAAA,aACGwD,MAAMC,KAAKzB,GAAUT,IAAI,SAAAyB,GACxB,IAAIU,EAAa,CAAEA,WAAY,QAE/B,OAAQV,GACN,IAAK,gBAGL,IAAK,wBAGL,IAAK,oBACHU,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,6BACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,YACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,cACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,UACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,OACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,IAAK,cACHA,EAAa,CAAEA,WAAY,WAC3B,MACF,QACEA,EAAa,CAAEA,WAAY,QAI/B,IAAIC,EAAQlC,OAAAmC,EAAA,EAAAnC,CAAOD,GApCaqC,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAqChC,QAAA2B,EAAAC,EAAeN,EAAfnB,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAAyB,KAAhBK,EAAgBF,EAAAnB,MACjBsB,EAAG1C,OAAA2C,EAAA,EAAA3C,CAAA,GAAQyC,GAEjB,GAAa,oBADFzC,OAAOG,KAAKuC,GAAKtC,OAE1B,IAAK,IAAIwC,KAAMF,EAAK,CAClBG,QAAQC,IAAIJ,EAAIE,IAChB,IAAMG,EAAK/C,OAAAmC,EAAA,EAAAnC,CAAO0C,EAAIE,IAFJI,GAAA,EAAAC,GAAA,EAAAC,OAAAtC,EAAA,IAGlB,QAAAuC,EAAAC,EAAgBL,EAAhBhC,OAAAC,cAAAgC,GAAAG,EAAAC,EAAAnC,QAAAC,MAAA8B,GAAA,EAAuB,KAAdK,EAAcF,EAAA/B,MACrByB,QAAQC,IAAIO,GACDA,EACFC,eAAe,YACtBrB,EAAa,CACXA,WAAY,aARA,MAAAR,GAAAwB,GAAA,EAAAC,EAAAzB,EAAA,YAAAuB,GAAA,MAAAI,EAAA1B,QAAA0B,EAAA1B,SAAA,WAAAuB,EAAA,MAAAC,MAzCQ,MAAAzB,GAAAY,GAAA,EAAAC,EAAAb,EAAA,YAAAW,GAAA,MAAAI,EAAAd,QAAAc,EAAAd,SAAA,WAAAW,EAAA,MAAAC,GAyDhC,OACEjE,EAAAC,EAAAC,cAAA,MAAI8B,IAAKkB,GACPlD,EAAAC,EAAAC,cAAA,MAAIgF,MAAO5B,GAAYJ,GACtBxB,EAAMD,IAAI,SAAAD,GACT,OAAOxB,EAAAC,EAAAC,cAAA,MAAI8B,IAAKL,OAAOG,KAAKN,GAAK0D,MAAOtB,mBAnH1CuB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.900f2294.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport './Mentor.css';\r\n\r\nconst mentors = require('../../data');\r\n\r\nconst mentor = props => {\r\n  return (\r\n    <div>\r\n      <h3>Mentor {props.name}</h3>\r\n      <Select\r\n        className=\"select\"\r\n        onChange={props.changed}\r\n        options={mentors}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default mentor;\r\n","import React from 'react';\r\n\r\nconst student = props => {\r\n  return <span>{props.name}</span>;\r\n};\r\n\r\nexport default student;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Mentor from './components/mentor/Mentor';\r\nimport Student from './components/student/Student';\r\n\r\nconst data = require('./data');\r\n\r\nclass App extends Component {\r\n  state = {\r\n    nick: localStorage.getItem('nick'),\r\n  };\r\n\r\n  changeNameHandler = event => {\r\n    this.setState({\r\n      nick: event.label,\r\n    });\r\n    localStorage.setItem('nick', event.label);\r\n  };\r\n\r\n  render() {\r\n    let findGroup = data.filter(\r\n      el => el.label === localStorage.getItem('nick')\r\n    );\r\n\r\n    let [group] = findGroup.map(el => el.group);\r\n    let names = group.map(group => {\r\n      let name = Object.keys(group).join();\r\n      return (\r\n        <th key={name}>\r\n          <Student name={name} />\r\n        </th>\r\n      );\r\n    });\r\n\r\n    let taskName = new Set();\r\n    for (let students of group) {\r\n      for (let item in students) {\r\n        let tasks = students[item];\r\n        tasks.map(elem => {\r\n          let task = Object.keys(elem)[0];\r\n          return taskName.add(task);\r\n        });\r\n      }\r\n    }\r\n\r\n    const taskStyle = {\r\n      textAlign: 'left',\r\n    };\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Mentor name={this.state.nick} changed={this.changeNameHandler} />\r\n        <table>\r\n          <caption>Students</caption>\r\n          <thead>\r\n            <tr>\r\n              <th>Tasks</th>\r\n              {names}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from(taskName).map(task => {\r\n              let background = { background: '#fff' };\r\n\r\n              switch (task) {\r\n                case 'Code Jam \"CV\"':\r\n                  background = { background: '#ff1317' };\r\n                  break;\r\n                case 'Code Jam \"Scoreboard\"':\r\n                  background = { background: '#ff1317' };\r\n                  break;\r\n                case 'Code Jam \"CoreJS\"':\r\n                  background = { background: '#ff1317' };\r\n                  break;\r\n                case 'Code Jam \"DOM, DOM Events\"':\r\n                  background = { background: '#f2e52b' };\r\n                  break;\r\n                case 'Markup #1':\r\n                  background = { background: '#9a9a9a' };\r\n                  break;\r\n                case 'RS Activist':\r\n                  background = { background: '#f2e52b' };\r\n                  break;\r\n                case 'YouTube':\r\n                  background = { background: '#ff1317' };\r\n                  break;\r\n                case 'Game':\r\n                  background = { background: '#f4eb42' };\r\n                  break;\r\n                case 'Course work':\r\n                  background = { background: '#9a9a9a' };\r\n                  break;\r\n                default:\r\n                  background = { background: '#fff' };\r\n              }\r\n\r\n              //here have to work status checked, but it doesn't\r\n              let newGroup = [...group];\r\n              for (let st of newGroup) {\r\n                const std = { ...st };\r\n                let name = Object.keys(std).join();\r\n                if (name === 'NoviceBlunderer') {\r\n                  for (let ts in std) {\r\n                    console.log(std[ts]);\r\n                    const tasks = [...std[ts]];\r\n                    for (let tsN of tasks) {\r\n                      console.log(tsN);\r\n                      let test = tsN;\r\n                      if (test.hasOwnProperty('status')) {\r\n                        background = {\r\n                          background: '#46ea03',\r\n                        };\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              return (\r\n                <tr key={task}>\r\n                  <td style={taskStyle}>{task}</td>\r\n                  {group.map(el => {\r\n                    return <td key={Object.keys(el)} style={background} />;\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}